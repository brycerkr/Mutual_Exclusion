// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: raalgo.proto

package raalgo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	P2Pnetwork_Ask_FullMethodName    = "/raalgo.P2Pnetwork/Ask"
	P2Pnetwork_Answer_FullMethodName = "/raalgo.P2Pnetwork/Answer"
)

// P2PnetworkClient is the client API for P2Pnetwork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for ChittyChat
type P2PnetworkClient interface {
	Ask(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Answer(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type p2PnetworkClient struct {
	cc grpc.ClientConnInterface
}

func NewP2PnetworkClient(cc grpc.ClientConnInterface) P2PnetworkClient {
	return &p2PnetworkClient{cc}
}

func (c *p2PnetworkClient) Ask(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, P2Pnetwork_Ask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PnetworkClient) Answer(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, P2Pnetwork_Answer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P2PnetworkServer is the server API for P2Pnetwork service.
// All implementations must embed UnimplementedP2PnetworkServer
// for forward compatibility.
//
// Service definition for ChittyChat
type P2PnetworkServer interface {
	Ask(context.Context, *Request) (*emptypb.Empty, error)
	Answer(context.Context, *Permission) (*emptypb.Empty, error)
	mustEmbedUnimplementedP2PnetworkServer()
}

// UnimplementedP2PnetworkServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedP2PnetworkServer struct{}

func (UnimplementedP2PnetworkServer) Ask(context.Context, *Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ask not implemented")
}
func (UnimplementedP2PnetworkServer) Answer(context.Context, *Permission) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Answer not implemented")
}
func (UnimplementedP2PnetworkServer) mustEmbedUnimplementedP2PnetworkServer() {}
func (UnimplementedP2PnetworkServer) testEmbeddedByValue()                    {}

// UnsafeP2PnetworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to P2PnetworkServer will
// result in compilation errors.
type UnsafeP2PnetworkServer interface {
	mustEmbedUnimplementedP2PnetworkServer()
}

func RegisterP2PnetworkServer(s grpc.ServiceRegistrar, srv P2PnetworkServer) {
	// If the following call pancis, it indicates UnimplementedP2PnetworkServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&P2Pnetwork_ServiceDesc, srv)
}

func _P2Pnetwork_Ask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PnetworkServer).Ask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2Pnetwork_Ask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PnetworkServer).Ask(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pnetwork_Answer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Permission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PnetworkServer).Answer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2Pnetwork_Answer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PnetworkServer).Answer(ctx, req.(*Permission))
	}
	return interceptor(ctx, in, info, handler)
}

// P2Pnetwork_ServiceDesc is the grpc.ServiceDesc for P2Pnetwork service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var P2Pnetwork_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raalgo.P2Pnetwork",
	HandlerType: (*P2PnetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ask",
			Handler:    _P2Pnetwork_Ask_Handler,
		},
		{
			MethodName: "Answer",
			Handler:    _P2Pnetwork_Answer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raalgo.proto",
}
